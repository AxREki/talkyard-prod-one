version: '2'
services:
  nginx:
    image: debiki/ed-nginx:$VERSION_TAG
    command: nginx
    restart: always
    volumes:
      - ./data/uploads/:/opt/ed/uploads/:ro
      - ./nginx-listen.conf:/etc/nginx/listen.conf:ro
      #- ./data/default-site/:/etc/nginx/default-site/:ro
      - ./data/sites-enabled/:/etc/nginx/sites-enabled/:ro
      - ./data/certbot/:/etc/certbot/:ro
      - ./data/certbot-challenges/.well-known/:/opt/nginx/html/.well-known/:ro
      - /var/log/nginx/:/var/log/nginx/
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - play

  # (todo)
  # This is a tiny Rust web server to which one POSTs /make-cert?domain=www.example.com
  # and which then calls Bash & certbot. The resulting cert is mounted :ro in Nginx, above.
  #certbot:
  #  image: debiki/ed-certbot:$VERSION_TAG
  #  command: certbot-server
  #  restart: always
  #  volumes:
  #    - ./data/certbot/:/etc/certbot/
  #    - ./data/certbot-challenges/.well-known/:/opt/webserver/html/.well-known/
  #
  # todo:
  #   docker-compose run --rm certbot certbot ...  ?

  play:
    image: debiki/ed-play:$VERSION_TAG
    restart: always
    stdin_open: true  # otherwise Play Framework exits
    volumes:
      - ./play-conf/:/opt/ed/play-conf:ro
      - ./data/uploads/:/opt/ed/uploads/
    links:
      - redis
      - postgres
    environment:
      CONFIG_FILE: /opt/ed/play-conf/prod.conf
      POSTGRES_PASSWORD: 'changeme'  # edit

  # SHOULD build my own Redis image for this, so I can auto upgrade the Redis config
  # by bumping the $VERSION_TAG.
  redis:
    image: redis:3.0.7-alpine
    restart: always
    volumes:
      - ./data/redis/:/data/

  postgres:
    image: debiki/ed-postgres:$VERSION_TAG
    restart: always
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data/
      # Monut here so standard monitoring tools configured to find Postgres logs here will work.
      - /var/log/postgres/:/var/lib/postgresql/data/pg_log/
    environment:
      POSTGRES_PASSWORD: 'changeme'  # edit (to the same password as above)
      # Optionally, streaming replication peer:
      # (but you'll need to rename ./postgres-data/recovery.conf.disabled first â€” and
      # that file isn't created until you start Postgres)
      # PEER_HOST: 'postgres2'
      # PEER_PORT: '5432'
      # PEER_PASSWORD: '...'

# vim: et ts=2 sw=2
